<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MBlendingService_SetBlendingMask_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'mask',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::DOUBLE,
            'key' => array(
                'type' => TType::I32,
            ),
            'val' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        2 => array(
            'var' => 'avatarID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var array
     */
    public $mask = null;
    /**
     * @var string
     */
    public $avatarID = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['mask'])) {
                $this->mask = $vals['mask'];
            }
            if (isset($vals['avatarID'])) {
                $this->avatarID = $vals['avatarID'];
            }
        }
    }

    public function getName()
    {
        return 'MBlendingService_SetBlendingMask_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->mask = array();
                        $_size182 = 0;
                        $_ktype183 = 0;
                        $_vtype184 = 0;
                        $xfer += $input->readMapBegin($_ktype183, $_vtype184, $_size182);
                        for ($_i186 = 0; $_i186 < $_size182; ++$_i186) {
                            $key187 = 0;
                            $val188 = 0.0;
                            $xfer += $input->readI32($key187);
                            $xfer += $input->readDouble($val188);
                            $this->mask[$key187] = $val188;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->avatarID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MBlendingService_SetBlendingMask_args');
        if ($this->mask !== null) {
            if (!is_array($this->mask)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('mask', TType::MAP, 1);
            $output->writeMapBegin(TType::I32, TType::DOUBLE, count($this->mask));
            foreach ($this->mask as $kiter189 => $viter190) {
                $xfer += $output->writeI32($kiter189);
                $xfer += $output->writeDouble($viter190);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->avatarID !== null) {
            $xfer += $output->writeFieldBegin('avatarID', TType::STRING, 2);
            $xfer += $output->writeString($this->avatarID);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
