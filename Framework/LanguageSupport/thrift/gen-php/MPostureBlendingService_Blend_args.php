<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MPostureBlendingService_Blend_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'startPosture',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MAvatarPostureValues',
        ),
        2 => array(
            'var' => 'targetPosture',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\MAvatarPostureValues',
        ),
        3 => array(
            'var' => 'weight',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'mask',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::DOUBLE,
            'key' => array(
                'type' => TType::I32,
            ),
            'val' => array(
                'type' => TType::DOUBLE,
                ),
        ),
        5 => array(
            'var' => 'properties',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \MAvatarPostureValues
     */
    public $startPosture = null;
    /**
     * @var \MAvatarPostureValues
     */
    public $targetPosture = null;
    /**
     * @var double
     */
    public $weight = null;
    /**
     * @var array
     */
    public $mask = null;
    /**
     * @var array
     */
    public $properties = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['startPosture'])) {
                $this->startPosture = $vals['startPosture'];
            }
            if (isset($vals['targetPosture'])) {
                $this->targetPosture = $vals['targetPosture'];
            }
            if (isset($vals['weight'])) {
                $this->weight = $vals['weight'];
            }
            if (isset($vals['mask'])) {
                $this->mask = $vals['mask'];
            }
            if (isset($vals['properties'])) {
                $this->properties = $vals['properties'];
            }
        }
    }

    public function getName()
    {
        return 'MPostureBlendingService_Blend_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->startPosture = new \MAvatarPostureValues();
                        $xfer += $this->startPosture->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->targetPosture = new \MAvatarPostureValues();
                        $xfer += $this->targetPosture->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->weight);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->mask = array();
                        $_size191 = 0;
                        $_ktype192 = 0;
                        $_vtype193 = 0;
                        $xfer += $input->readMapBegin($_ktype192, $_vtype193, $_size191);
                        for ($_i195 = 0; $_i195 < $_size191; ++$_i195) {
                            $key196 = 0;
                            $val197 = 0.0;
                            $xfer += $input->readI32($key196);
                            $xfer += $input->readDouble($val197);
                            $this->mask[$key196] = $val197;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->properties = array();
                        $_size198 = 0;
                        $_ktype199 = 0;
                        $_vtype200 = 0;
                        $xfer += $input->readMapBegin($_ktype199, $_vtype200, $_size198);
                        for ($_i202 = 0; $_i202 < $_size198; ++$_i202) {
                            $key203 = '';
                            $val204 = '';
                            $xfer += $input->readString($key203);
                            $xfer += $input->readString($val204);
                            $this->properties[$key203] = $val204;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MPostureBlendingService_Blend_args');
        if ($this->startPosture !== null) {
            if (!is_object($this->startPosture)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('startPosture', TType::STRUCT, 1);
            $xfer += $this->startPosture->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->targetPosture !== null) {
            if (!is_object($this->targetPosture)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('targetPosture', TType::STRUCT, 2);
            $xfer += $this->targetPosture->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->weight !== null) {
            $xfer += $output->writeFieldBegin('weight', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->weight);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mask !== null) {
            if (!is_array($this->mask)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('mask', TType::MAP, 4);
            $output->writeMapBegin(TType::I32, TType::DOUBLE, count($this->mask));
            foreach ($this->mask as $kiter205 => $viter206) {
                $xfer += $output->writeI32($kiter205);
                $xfer += $output->writeDouble($viter206);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->properties !== null) {
            if (!is_array($this->properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('properties', TType::MAP, 5);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->properties));
            foreach ($this->properties as $kiter207 => $viter208) {
                $xfer += $output->writeString($kiter207);
                $xfer += $output->writeString($viter208);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
